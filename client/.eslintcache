[{"/Users/Sid/projects/coding-projects/socialMittens/client/src/index.js":"1","/Users/Sid/projects/coding-projects/socialMittens/client/src/reportWebVitals.js":"2","/Users/Sid/projects/coding-projects/socialMittens/client/src/App.js":"3","/Users/Sid/projects/coding-projects/socialMittens/client/src/components/NavBar.js":"4","/Users/Sid/projects/coding-projects/socialMittens/client/src/pages/Profile.js":"5","/Users/Sid/projects/coding-projects/socialMittens/client/src/pages/Home.js":"6","/Users/Sid/projects/coding-projects/socialMittens/client/src/pages/CreatePost.js":"7","/Users/Sid/projects/coding-projects/socialMittens/client/src/pages/Login.js":"8","/Users/Sid/projects/coding-projects/socialMittens/client/src/pages/SignUp.js":"9","/Users/Sid/projects/coding-projects/socialMittens/client/src/pages/OtherUserProfile.js":"10","/Users/Sid/projects/coding-projects/socialMittens/client/src/reducers/userReducer.js":"11","/Users/Sid/projects/coding-projects/socialMittens/client/src/pages/followingPosts.js":"12"},{"size":500,"mtime":1612332034869,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1612332034872,"results":"15","hashOfConfig":"14"},{"size":2314,"mtime":1612344725250,"results":"16","hashOfConfig":"14"},{"size":1489,"mtime":1612427999603,"results":"17","hashOfConfig":"14"},{"size":2457,"mtime":1612343917768,"results":"18","hashOfConfig":"14"},{"size":8627,"mtime":1612343394481,"results":"19","hashOfConfig":"14"},{"size":3980,"mtime":1612332034869,"results":"20","hashOfConfig":"14"},{"size":2844,"mtime":1612332034870,"results":"21","hashOfConfig":"14"},{"size":2368,"mtime":1612332034871,"results":"22","hashOfConfig":"14"},{"size":5969,"mtime":1612343394482,"results":"23","hashOfConfig":"14"},{"size":645,"mtime":1612343394482,"results":"24","hashOfConfig":"14"},{"size":8653,"mtime":1612344642162,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"7e9sxf",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"28"},"/Users/Sid/projects/coding-projects/socialMittens/client/src/index.js",[],["59","60"],"/Users/Sid/projects/coding-projects/socialMittens/client/src/reportWebVitals.js",[],"/Users/Sid/projects/coding-projects/socialMittens/client/src/App.js",["61","62"],"import React, {useEffect, createContext, useReducer, useContext} from 'react'\nimport './App.css'\nimport NavBar from './components/NavBar'\nimport {BrowserRouter, Route, Switch, useHistory} from 'react-router-dom'\nimport Home from './pages/Home'\nimport Profile from './pages/Profile'\nimport SignUP from './pages/SignUp'\nimport Login from './pages/Login'\nimport CreatePost from './pages/CreatePost'\nimport OtherUserProfile from './pages/OtherUserProfile'\nimport FollowingPosts from './pages/followingPosts'\nimport {reducer, initialState} from './reducers/userReducer'\n\n\n//Create a context [ type of global state ] and export it\nexport const UserContext=createContext()\n\n//create a seperate component for app routes\nconst AppRouting=() => {\n\n  //initiallize useHistory\n  const history=useHistory()\n\n  //destructure the UserContext and get state and dispatch from it.\n  const {state, dispatch}=useContext(UserContext)\n\n  //use effect to run when the component mounts for first time\n  useEffect(() => {\n    //get user from local storage\n    const user=JSON.parse(localStorage.getItem(\"user\"))\n\n\n\n    //if user is   in local storage save him to context else to login\n    if (user) {\n\n      //create a action called USER to change the global context state.\n      dispatch({type: \"USER\", payload: user})\n\n      // history.push('/')\n    }\n    else {\n      history.push('/login')\n    }\n\n  }, [])\n\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={Home}></Route>\n      <Route path=\"/profile\" exact component={Profile}></Route>\n      <Route path=\"/signup\" component={SignUP}></Route>\n      <Route path=\"/login\" component={Login}></Route>\n      <Route path=\"/create\" component={CreatePost}></Route>\n      <Route path=\"/profile/:userId\" component={OtherUserProfile}></Route>\n      <Route path=\"/followingPosts\"component={FollowingPosts}></Route>\n    </Switch>\n  )\n}\n\n\nfunction App() {\n\n  //initallize userReducer so when the context state changes the components re-render\n  const [state, dispatch]=useReducer(reducer, initialState)\n\n  return (\n\n    //Wrap everything with context so child components have access to state.\n    <UserContext.Provider value={{state, dispatch}}>\n      <BrowserRouter>\n        <NavBar />\n        <AppRouting />\n      </BrowserRouter>\n    </UserContext.Provider>\n  )\n}\n\nexport default App\n","/Users/Sid/projects/coding-projects/socialMittens/client/src/components/NavBar.js",["63"],"/Users/Sid/projects/coding-projects/socialMittens/client/src/pages/Profile.js",["64","65"],"import React, {useEffect, useState, useContext} from 'react'\nimport {UserContext} from '../App'\n\nconst Profile=() => {\n\n    //use context to get access to user state\n    const {state, dispatch} = useContext(UserContext)\n\n    //state to save all user posts\n    const [myposts, setMyposts]=useState([])\n\n    //on render get all user posts\n    useEffect(() => {\n\n        //fetch request to server to get all user posts\n        fetch('/mypost', {\n            headers: {\n                \"Authorization\": \"Bearer \"+localStorage.getItem('jwt')\n            }\n        })\n            .then(res => res.json())\n            .then(data => {\n                setMyposts(data.posts)\n            })\n\n    }, [])\n\n    return (\n        // Page Div\n        <div style={{maxWidth: '550px', margin: '0px auto'}}>\n            {/* Image and details */}\n            <div style={{\n                display: 'flex',\n                justifyContent: 'space-around',\n                margin: '18px 0px',\n                borderBottom: '1px solid grey'\n            }}>\n                {/* Image div */}\n                <div>\n                    <img style={{width: \"160px\", height: \"160px\", borderRadius: \"80px\"}}\n                        src=\"https://images.unsplash.com/photo-1558624232-75ee22af7e67?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=800&q=80\"\n                    />\n                </div>\n                {/* User details */}\n                <div>\n                    <h4>\n                       {state?state.name:\"loading user\"}\n                    </h4>\n                    <h5>{state?state.email: \"loading email\"}</h5>\n                    <div style={{display: 'flex', justifyContent: 'space-between', width: '108%'}}>\n                        <h6>{myposts.length} Post</h6>\n                        <h6>{state.followers ? state.followers.length : 0} followers</h6>\n                        <h6>{ state.following ? state.following.length : 0} following</h6>\n                    </div>\n                </div>\n            </div>\n\n            {/* Users Gallery */}\n            <div className=\"gallery\">\n                {\n                    myposts.map(post => {\n                        return (\n                            <img key={post._id} className='gallery-item' src={post.image} alt={post.title} />\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Profile","/Users/Sid/projects/coding-projects/socialMittens/client/src/pages/Home.js",["66","67","68","69","70","71","72","73","74"],"import React, {useState, useEffect, useContext} from 'react'\nimport {UserContext} from '../App'\nimport M from 'materialize-css'\nimport {Link} from 'react-router-dom'\n\nconst Home=() => {\n\n    //Post state\n    const [posts, setPosts]=useState([])\n\n    //Using context to get user\n    const {state, dispatch}=useContext(UserContext)\n\n    //On mount get posts from server\n    useEffect(() => {\n\n        //request to get all the post from server\n        fetch('/allpost', {\n            headers: {\n                \"Authorization\": \"Bearer \"+localStorage.getItem('jwt')\n            },\n        })\n            .then(res => res.json())\n            .then(result => {\n                setPosts(result.posts)\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }, [posts])\n\n    //Create a function to like a post.\n    const likePost=(id) => {\n\n        //Create a fetch request to like the post\n        fetch('/like', {\n            method: 'put',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \"+localStorage.getItem('jwt')\n            },\n            body: JSON.stringify({\n                id: id\n            })\n        })\n            .then(res => res.json())\n            .then(data => {\n                //if the ids match then return new data else return the old one\n                const newPosts=posts.map(item => {\n                    if (item._id==data._id) {\n                        return data\n                    }\n                    else {\n                        return item\n                    }\n                })\n                setPosts(newPosts)\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    //Create a function to unlike a post.\n    const unlikePost=(id) => {\n\n        //Create a fetch request to like the post\n        fetch('/unlike', {\n            method: 'put',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \"+localStorage.getItem('jwt')\n            },\n            body: JSON.stringify({\n                id: id\n            })\n        })\n            .then(res => res.json())\n            .then(data => {\n                //if the ids match then return new data else return the old one\n                const newPosts=posts.map(item => {\n                    if (item._id==data._id) {\n                        return data\n                    }\n                    else {\n                        return item\n                    }\n                })\n                setPosts(newPosts)\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    //Create a function to add comment on post.\n    const addComment=(comment, id) => {\n        fetch('/comment', {\n            method: \"put\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \"+localStorage.getItem('jwt')\n            },\n            body: JSON.stringify({\n                id: id,\n                comment: comment\n            })\n        }).then(res => res.json())\n            .then(result => {\n                console.log(result)\n                const newPosts=posts.map(item => {\n                    if (item._id==result._id) {\n                        return result\n                    }\n                    else {\n                        return item\n                    }\n                })\n                setPosts(newPosts)\n            }).catch(error => {\n                console.log(error)\n            })\n    }\n\n    //Create a function to delete a post.\n    const deletePost=(id) => {\n        fetch(`/deletePost/${id}`, {\n            method: \"delete\",\n            headers: {\n                Authorization: \"Bearer \"+localStorage.getItem(\"jwt\")\n            }\n        })\n            .then(res => res.json())\n            .then(result => {\n                console.log(result)\n                const newData=posts.filter(post => {\n                    if (post._id==result._id) {\n                        return result\n                    }\n                    else {\n                        return post\n                    }\n                })\n                setPosts(newData)\n            })\n    }\n\n    //Create a function to delete a comment.\n    const deleteComment=(postId, commentId) => {\n        fetch(`deleteComment/${postId}/${commentId}`, {\n            method: \"delete\",\n            headers: {\n                Authorization: \"Bearer \"+localStorage.getItem(\"jwt\")\n            }\n        })\n            .then(res => res.json())\n            .then(result => {\n                console.log(result)\n                const newData=posts.filter(post => {\n                    if (post._id===result._id) {\n                        return result\n                    }\n                    else {\n                        return post\n                    }\n                })\n                setPosts(newData)\n            })\n    }\n\n    return (\n        // Main div\n        <div className=\"home\">\n            {\n                posts.map(post => {\n                    return (\n                        <div className=\"card home-card\" key={post._id}>\n                            <h5><Link to={post.postedBy._id==state._id? '/profile':`/profile/${post.postedBy._id}`}>{post.postedBy.name} </Link>\n                                {\n                                    //expression to check weather the id of current user matches the post id.\n                                    post.postedBy._id==state._id\n                                    &&\n                                    <i className=\"material-icons\" style={{float: \"right\"}}\n                                        onClick={() => deletePost(post._id)}\n                                    >\n                                        delete</i>\n                                }\n                            </h5>\n\n                            {/* Card image div */}\n                            <div className=\"card-image\">\n                                <img src={post.image} />\n                            </div>\n                            {/* Card contents */}\n                            <div className=\"card-content\">\n\n                                {/* Allow current user to only like a post once */}\n                                {\n                                    post.likes.includes(state._id)?\n                                        <i className=\"material-icons\" style={{color: 'red'}} onClick={() => {unlikePost(post._id)}} >thumb_down</i>\n                                        :\n                                        <i className=\"material-icons\" style={{color: 'blue'}} onClick={() => {likePost(post._id)}} >thumb_up</i>\n                                }\n\n                                <h6>{post.likes.length} Likes</h6>\n                                <h6>{post.title}</h6>\n                                <p>{post.body}</p>\n\n                                {\n                                    post.comments.map(record => {\n                                        return (\n                                            <div>\n                                                {\n                                                    record.postedBy._id===state._id\n                                                    &&\n                                                    <i className=\"material-icons\" style={{float: \"right\"}}\n                                                        onClick={() => deleteComment(post._id, record._id)}\n                                                    >\n                                                        delete</i>\n                                                }\n                                                <h6 key={record._id}><span style={{fontWeight: \"500\"}}>{record.postedBy.name}</span> {record.comment}</h6>\n                                            </div>\n                                        )\n                                    })\n                                }\n                                <form onSubmit={(event) => {\n                                    event.preventDefault()\n                                    addComment(event.target[0].value, post._id)\n                                }}>\n                                    <input type=\"text\" placeholder=\"Add a comment\" />\n                                </form>\n                            </div>\n                        </div>\n                    )\n                })\n            }\n        </div>\n\n    )\n\n}\n\nexport default Home","/Users/Sid/projects/coding-projects/socialMittens/client/src/pages/CreatePost.js",["75"],"import {React, useState, useEffect} from 'react'\nimport M from 'materialize-css'\nimport {useHistory} from 'react-router-dom'\n\nconst CreatePost=() => {\n\n    //create history constant to route around\n    const history=useHistory()\n\n    //Create title state\n    const [title, setTitle]=useState(\"\")\n    const [body, setBody]=useState(\"\")\n    //this is where the file will be stored\n    const [image, setImage]=useState(\"\")\n    //This will update onces cloudinary returns the url.\n    const [imgURL, setImgURL]=useState(\"\")\n\n    //Use effect when the url is changed to make a createpost request on server\n    useEffect(() => {\n\n        //If the imgURL exists then create req on server to save\n        if (imgURL) {\n            //Save post on server\n            fetch(\"/createpost\", {\n                method: 'post',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": \"Bearer \"+localStorage.getItem(\"jwt\")\n                },\n                body: JSON.stringify({\n                    title,\n                    body,\n                    imgURL\n                })\n            })\n                .then(res => res.json())\n                .then(data => {\n                    console.log(data)\n                    if (data.error) {\n                        M.toast({html: data.error, classes: \"#d32f2f red lighten-2\"})\n                    }\n                    else {\n                        M.toast({html: \"Post uploaded sucessfully\", classes: \"#BAF2BB green lighten-2\"})\n                        history.push('/')\n                    }\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        }\n    } , [imgURL])\n\n    //Function to post details of image file to Cloudinary\n    const postDetails=() => {\n        //use formdata because the image is a file\n        const data=new FormData()\n        //append the image file on data\n        data.append(\"file\", image)\n        //append the cloudinary project name\n        data.append(\"upload_preset\", 'Social-Mittens')\n        //append the cloudinary db name\n        data.append(\"cloud_name\", \"sidimages\")\n        //create an api request to cloudinary to upload the image data.\n        fetch(\"\thttps://api.cloudinary.com/v1_1/sidimages/image/upload\", {\n            method: 'post',\n            body: data\n        })\n            .then(res => res.json())\n            //once the data is converted to json set the url state to url given by cloudinary\n            .then(data => {\n                console.log(data)\n                setImgURL(data.url)\n            })\n            .catch(error => {\n                console.log(error)\n            })\n        }\n\n        return (\n            // Main Div for the form\n            <div className=\"card input-filed\" style={{\n                margin: \"30px auto\",\n                maxWidth: \"500px\",\n                padding: \"20px\",\n                textAlign: 'center'\n            }}>\n\n                <input type=\"text\" placeholder=\"title\" value={title} onChange={(event) => setTitle(event.target.value)} />\n                <input type=\"text\" placeholder=\"Body\" value={body} onChange={(event) => setBody(event.target.value)} />\n                {/* File input */}\n                <div className=\"file-field input-field\">\n                    <div className=\"btn white\">\n                        <i class=\"material-icons\" style={{color: 'black'}} >attach_file</i>\n                        <input type=\"file\" onChange={(event) => setImage(event.target.files[0])} />\n                    </div>\n                    <div className=\"file-path-wrapper\">\n                        <input className=\"file-path validate\" type=\"text\" />\n                    </div>\n                </div>\n                <button class=\"btn waves-effect waves-light #F2BAC9 pink lighten-3\" onClick={() => postDetails()} >Submit Post\n                </button>\n            </div>\n        )\n}\n    export default CreatePost","/Users/Sid/projects/coding-projects/socialMittens/client/src/pages/Login.js",["76","77","78"],"import {React, useState, useContext} from 'react'\nimport {Link, useHistory} from 'react-router-dom'\nimport M from 'materialize-css'\nimport {UserContext} from '../App'\n\nconst Login=() => {\n\n    //destructure the UserContext and get state and dispatch from it.\n    const{state, dispatch} = useContext(UserContext)\n\n    //initiallizing use History\n    const history=useHistory()\n\n    //Create States\n    const [password, setPassword]=useState(\"\")\n    const [email, setEmail]=useState(\"\")\n\n    //Function to post data using fetch\n    const PostData=() => {\n        //Email Check\n        if (!/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email)) {\n            return M.toast({html: \"Invalid Email\", classes: \"#d32f2f red lighten-2\"})\n        }\n        fetch(\"/signin\", {\n            method: 'post',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                password,\n                email\n            })\n        }).then(res => res.json())\n            .then(data => {\n                console.log(data)\n                if (data.error) {\n                    M.toast({html: data.error, classes: \"#d32f2f red lighten-2\"})\n                }\n                else {\n                    console.log(data)\n                    //save the token passed by server to local storage\n                    localStorage.setItem(\"jwt\", data.token)\n\n                    //Save the user data to local storage\n                    localStorage.setItem(\"user\", JSON.stringify(data.user))\n\n                    //create a action called USER to change the global context state.\n                    dispatch({type: \"USER\", payload: data.user})\n\n                    M.toast({html: \"Signed in Sucessfully\", classes: \"#BAF2BB green lighten-2\"})\n                    //once the user has signed up take him to Login screen\n                    history.push('/')\n\n                }\n            }).catch(error => {\n                console.log(error)\n            })\n    }\n\n    return (\n        <div className=\"mycard\" >\n            <div class=\"card auth-card input-field\">\n                <h4>Social Mittens</h4>\n                <input type=\"text\" placeholder=\"Email\" value={email} onChange={(event) => setEmail(event.target.value)} />\n                <input type=\"password\" placeholder=\"Password\" value={password} onChange={(event) => setPassword(event.target.value)} />\n\n                <button class=\"btn waves-effect waves-light #F2BAC9 pink lighten-3\" onClick={() => PostData()}>Login\n                </button>\n                <h5>\n                    <Link to=\"/signin\">You dont have an account?</Link>\n                </h5>\n            </div>\n        </div>\n    )\n}\n\nexport default Login","/Users/Sid/projects/coding-projects/socialMittens/client/src/pages/SignUp.js",["79","80"],"import React, {useState} from 'react'\nimport {Link, useHistory} from 'react-router-dom'\nimport M from 'materialize-css'\n\nconst SignUp=() => {\n\n    //initiallizing use History\n    const history=useHistory()\n\n    //Create States\n    const [name, setName]=useState(\"\")\n    const [password, setPassword]=useState(\"\")\n    const [email, setEmail]=useState(\"\")\n\n    //Function to post data using fetch\n    const PostData=() => {\n        //Email Check\n        if (!/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email)) {\n            return M.toast({html: \"Invalid Email\", classes: \"#d32f2f red lighten-2\"})\n        }\n        fetch(\"/signup\", {\n            method: 'post',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                name,\n                password,\n                email\n            })\n        }).then(res => res.json())\n            .then(data => {\n                if (data.error) {\n                    M.toast({html: data.error, classes: \"#d32f2f red lighten-2\"})\n                }\n                else {\n                    M.toast({html: data.message, classes: \"#BAF2BB green lighten-2\"})\n                    //once the user has signed up take him to Login screen\n                    history.push('/login')\n\n                }\n            }).catch(error => {\n                console.log(error)\n            })\n    }\n\n\n    return (\n        <div className=\"mycard\" >\n            <div class=\"card auth-card input-field\">\n                <h4>Social Mittens</h4>\n                <input type=\"text\" placeholder=\"Name\" value={name} onChange={(event) => setName(event.target.value)} />\n                <input type=\"text\" placeholder=\"Email\" value={email} onChange={(event) => setEmail(event.target.value)} />\n                <input type=\"password\" placeholder=\"Password\" value={password} onChange={(event) => setPassword(event.target.value)} />\n                <button class=\"btn waves-effect waves-light #F2BAC9 pink lighten-3\" onClick={() => PostData()} >Sign Up\n                </button>\n                <h5>\n                    <Link to=\"/signin\">Do you already have an account?</Link>\n                </h5>\n            </div>\n        </div>\n    )\n}\n\nexport default SignUp","/Users/Sid/projects/coding-projects/socialMittens/client/src/pages/OtherUserProfile.js",["81","82","83","84"],"import React, {useEffect, useState, useContext} from 'react'\nimport {UserContext} from '../App'\nimport {useParams} from 'react-router-dom'\n\nconst OtherUserProfile=() => {\n\n    //use the context\n    const {state, dispatch}=useContext(UserContext)\n\n    //state to save all user posts\n    const [userProfile, setUserProfile]=useState()\n\n    //save user id from params.\n    const {userId}=useParams()\n\n    //Current user follow status\n    const [following, setFollowing]=useState(false)\n\n    // on render get all user posts\n    useEffect(() => {\n\n        //fetch request to server to get all user posts\n        fetch(`/user/${userId}`, {\n            headers: {\n                \"Authorization\": \"Bearer \"+localStorage.getItem('jwt')\n            }\n        })\n            .then(res => res.json())\n            .then(data => {\n\n                setUserProfile(data)\n            })\n\n    }, [])\n\n    //Function to follow user.\n    const followUser=() => {\n        fetch('/follow', {\n            method: 'put',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": 'Bearer '+localStorage.getItem('jwt')\n            },\n            body: JSON.stringify({\n                followId: userId\n            })\n        })\n            .then(res => res.json())\n            .then(data => {\n                console.log(data)\n                //dispatch followers and following to Context\n                dispatch({type: \"UPDATE\", payload: {following: data.following, followers: data.followers}})\n                localStorage.setItem(\"user\", JSON.stringify(data))\n                setUserProfile((prevState) => {\n                    return {\n                        ...prevState,\n                        user: {\n                            ...prevState.user,\n                            followers: [...prevState.user.followers, data._id]\n                        }\n                    }\n                })\n                setFollowing(true)\n            })\n    }\n\n    //Function to Unfollow user.\n    const unfollowUser=() => {\n        fetch('/unfollow', {\n            method: 'put',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": 'Bearer '+localStorage.getItem('jwt')\n            },\n            body: JSON.stringify({\n                unfollowId: userId\n            })\n        })\n            .then(res => res.json())\n            .then(data => {\n                console.log(data)\n                //dispatch followers and following to Context\n                dispatch({type: \"UPDATE\", payload: {following: data.following, followers: data.followers}})\n                localStorage.setItem(\"user\", JSON.stringify(data))\n                setUserProfile((prevState) => {\n                    const newfollowers=prevState.user.followers.filter(item => item!==data._id)\n                    return {\n                        ...prevState,\n                        user: {\n                            ...prevState.user,\n                            followers: newfollowers\n                        }\n                    }\n                })\n                setFollowing(false)\n            })\n\n    }\n\n\n    return (\n\n        <>\n            {userProfile?\n                // Page Div\n                <div style={{maxWidth: '550px', margin: '0px auto'}}>\n                    {/* Image and details */}\n                    <div style={{\n                        display: 'flex',\n                        justifyContent: 'space-around',\n                        margin: '18px 0px',\n                        borderBottom: '1px solid grey'\n                    }}>\n                        {/* Image div */}\n                        <div>\n                            <img style={{width: \"160px\", height: \"160px\", borderRadius: \"80px\"}}\n                                src=\"https://images.unsplash.com/photo-1558624232-75ee22af7e67?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=800&q=80\"\n                            />\n                        </div>\n                        {/* User details */}\n                        <div>\n                            <h4>\n                                {userProfile.user.name}\n                            </h4>\n                            <h4>\n                                {userProfile.user.email}\n                            </h4>\n                            <div style={{display: 'flex', justifyContent: 'space-between', width: '108%'}}>\n                                <h6>{userProfile.posts.length} posts</h6>\n                                <h6>{userProfile.user.followers.length} Followers</h6>\n                                <h6>{userProfile.user.following.length} Following</h6>\n                            </div>\n                            {following? <button class=\"btn waves-effect waves-light #F2BAC9 pink lighten-3\" style={{margin: '10px'}}\n                                onClick={() => unfollowUser()} >\n                                Unfollow\n                            </button>\n                                :\n                                <button class=\"btn waves-effect waves-light #F2BAC9 pink lighten-3\" style={{margin: '10px'}}\n                                    onClick={() => followUser()} >\n                                    Follow\n                            </button>}\n\n                        </div>\n                    </div>\n\n                    {/* Users Gallery */}\n                    <div className=\"gallery\">\n                        {\n                            userProfile.posts.map(post => {\n                                return (\n                                    <img key={post._id} className='gallery-item' src={post.image} alt={post.title} />\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n\n\n\n                :<h2>Loading...</h2>}\n\n        </>\n    )\n}\n\nexport default OtherUserProfile","/Users/Sid/projects/coding-projects/socialMittens/client/src/reducers/userReducer.js",[],"/Users/Sid/projects/coding-projects/socialMittens/client/src/pages/followingPosts.js",["85","86","87","88","89","90","91","92","93"],"import React, {useState, useEffect, useContext} from 'react'\nimport {UserContext} from '../App'\nimport M from 'materialize-css'\nimport {Link} from 'react-router-dom'\n\nconst FollowingPosts=() => {\n\n    //Post state\n    const [posts, setPosts]=useState([])\n\n    //Using context to get user\n    const {state, dispatch}=useContext(UserContext)\n\n    //On mount get posts from server\n    useEffect(() => {\n\n        //request to get all the post from server\n        fetch('/getfollowpost', {\n            headers: {\n                \"Authorization\": \"Bearer \"+localStorage.getItem('jwt')\n            },\n        })\n            .then(res => res.json())\n            .then(result => {\n                setPosts(result.posts)\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }, [posts])\n\n    //Create a function to like a post.\n    const likePost=(id) => {\n\n        //Create a fetch request to like the post\n        fetch('/like', {\n            method: 'put',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \"+localStorage.getItem('jwt')\n            },\n            body: JSON.stringify({\n                id: id\n            })\n        })\n            .then(res => res.json())\n            .then(data => {\n                //if the ids match then return new data else return the old one\n                const newPosts=posts.map(item => {\n                    if (item._id==data._id) {\n                        return data\n                    }\n                    else {\n                        return item\n                    }\n                })\n                setPosts(newPosts)\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    //Create a function to unlike a post.\n    const unlikePost=(id) => {\n\n        //Create a fetch request to like the post\n        fetch('/unlike', {\n            method: 'put',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \"+localStorage.getItem('jwt')\n            },\n            body: JSON.stringify({\n                id: id\n            })\n        })\n            .then(res => res.json())\n            .then(data => {\n                //if the ids match then return new data else return the old one\n                const newPosts=posts.map(item => {\n                    if (item._id==data._id) {\n                        return data\n                    }\n                    else {\n                        return item\n                    }\n                })\n                setPosts(newPosts)\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    //Create a function to add comment on post.\n    const addComment=(comment, id) => {\n        fetch('/comment', {\n            method: \"put\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \"+localStorage.getItem('jwt')\n            },\n            body: JSON.stringify({\n                id: id,\n                comment: comment\n            })\n        }).then(res => res.json())\n            .then(result => {\n                console.log(result)\n                const newPosts=posts.map(item => {\n                    if (item._id==result._id) {\n                        return result\n                    }\n                    else {\n                        return item\n                    }\n                })\n                setPosts(newPosts)\n            }).catch(error => {\n                console.log(error)\n            })\n    }\n\n    //Create a function to delete a post.\n    const deletePost=(id) => {\n        fetch(`/deletePost/${id}`, {\n            method: \"delete\",\n            headers: {\n                Authorization: \"Bearer \"+localStorage.getItem(\"jwt\")\n            }\n        })\n            .then(res => res.json())\n            .then(result => {\n                console.log(result)\n                const newData=posts.filter(post => {\n                    if (post._id==result._id) {\n                        return result\n                    }\n                    else {\n                        return post\n                    }\n                })\n                setPosts(newData)\n            })\n    }\n\n    //Create a function to delete a comment.\n    const deleteComment=(postId, commentId) => {\n        fetch(`deleteComment/${postId}/${commentId}`, {\n            method: \"delete\",\n            headers: {\n                Authorization: \"Bearer \"+localStorage.getItem(\"jwt\")\n            }\n        })\n            .then(res => res.json())\n            .then(result => {\n                console.log(result)\n                const newData=posts.filter(post => {\n                    if (post._id===result._id) {\n                        return result\n                    }\n                    else {\n                        return post\n                    }\n                })\n                setPosts(newData)\n            })\n    }\n\n    return (\n        // Main div\n        <div className=\"home\">\n            {\n                posts.map(post => {\n                    return (\n                        <div className=\"card home-card\" key={post._id}>\n                            <h5><Link to={post.postedBy._id==state._id? '/profile':`/profile/${post.postedBy._id}`}>{post.postedBy.name} </Link>\n                                {\n                                    //expression to check weather the id of current user matches the post id.\n                                    post.postedBy._id==state._id\n                                    &&\n                                    <i className=\"material-icons\" style={{float: \"right\"}}\n                                        onClick={() => deletePost(post._id)}\n                                    >\n                                        delete</i>\n                                }\n                            </h5>\n\n                            {/* Card image div */}\n                            <div className=\"card-image\">\n                                <img src={post.image} />\n                            </div>\n                            {/* Card contents */}\n                            <div className=\"card-content\">\n\n                                {/* Allow current user to only like a post once */}\n                                {\n                                    post.likes.includes(state._id)?\n                                        <i className=\"material-icons\" style={{color: 'red'}} onClick={() => {unlikePost(post._id)}} >thumb_down</i>\n                                        :\n                                        <i className=\"material-icons\" style={{color: 'blue'}} onClick={() => {likePost(post._id)}} >thumb_up</i>\n                                }\n\n                                <h6>{post.likes.length} Likes</h6>\n                                <h6>{post.title}</h6>\n                                <p>{post.body}</p>\n\n                                {\n                                    post.comments.map(record => {\n                                        return (\n                                            <div>\n                                                {\n                                                    record.postedBy._id===state._id\n                                                    &&\n                                                    <i className=\"material-icons\" style={{float: \"right\"}}\n                                                        onClick={() => deleteComment(post._id, record._id)}\n                                                    >\n                                                        delete</i>\n                                                }\n                                                <h6 key={record._id}><span style={{fontWeight: \"500\"}}>{record.postedBy.name}</span> {record.comment}</h6>\n                                            </div>\n                                        )\n                                    })\n                                }\n                                <form onSubmit={(event) => {\n                                    event.preventDefault()\n                                    addComment(event.target[0].value, post._id)\n                                }}>\n                                    <input type=\"text\" placeholder=\"Add a comment\" />\n                                </form>\n                            </div>\n                        </div>\n                    )\n                })\n            }\n        </div>\n\n    )\n\n}\n\nexport default FollowingPosts",{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":25,"column":10,"nodeType":"100","messageId":"101","endLine":25,"endColumn":15},{"ruleId":"102","severity":1,"message":"103","line":46,"column":6,"nodeType":"104","endLine":46,"endColumn":8,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":41,"column":9,"nodeType":"108","endLine":41,"endColumn":68},{"ruleId":"98","severity":1,"message":"109","line":7,"column":19,"nodeType":"100","messageId":"101","endLine":7,"endColumn":27},{"ruleId":"110","severity":1,"message":"111","line":40,"column":21,"nodeType":"108","endLine":42,"endColumn":23},{"ruleId":"98","severity":1,"message":"112","line":3,"column":8,"nodeType":"100","messageId":"101","endLine":3,"endColumn":9},{"ruleId":"98","severity":1,"message":"109","line":12,"column":19,"nodeType":"100","messageId":"101","endLine":12,"endColumn":27},{"ruleId":"113","severity":1,"message":"114","line":50,"column":33,"nodeType":"115","messageId":"116","endLine":50,"endColumn":35},{"ruleId":"113","severity":1,"message":"114","line":82,"column":33,"nodeType":"115","messageId":"116","endLine":82,"endColumn":35},{"ruleId":"113","severity":1,"message":"114","line":112,"column":33,"nodeType":"115","messageId":"116","endLine":112,"endColumn":35},{"ruleId":"113","severity":1,"message":"114","line":137,"column":33,"nodeType":"115","messageId":"116","endLine":137,"endColumn":35},{"ruleId":"113","severity":1,"message":"114","line":178,"column":60,"nodeType":"115","messageId":"116","endLine":178,"endColumn":62},{"ruleId":"113","severity":1,"message":"114","line":181,"column":54,"nodeType":"115","messageId":"116","endLine":181,"endColumn":56},{"ruleId":"110","severity":1,"message":"111","line":192,"column":33,"nodeType":"108","endLine":192,"endColumn":57},{"ruleId":"102","severity":1,"message":"117","line":51,"column":9,"nodeType":"104","endLine":51,"endColumn":17,"suggestions":"118"},{"ruleId":"98","severity":1,"message":"99","line":9,"column":11,"nodeType":"100","messageId":"101","endLine":9,"endColumn":16},{"ruleId":"119","severity":1,"message":"120","line":21,"column":24,"nodeType":"121","messageId":"122","endLine":21,"endColumn":25,"suggestions":"123"},{"ruleId":"119","severity":1,"message":"120","line":21,"column":49,"nodeType":"121","messageId":"122","endLine":21,"endColumn":50,"suggestions":"124"},{"ruleId":"119","severity":1,"message":"120","line":18,"column":24,"nodeType":"121","messageId":"122","endLine":18,"endColumn":25,"suggestions":"125"},{"ruleId":"119","severity":1,"message":"120","line":18,"column":49,"nodeType":"121","messageId":"122","endLine":18,"endColumn":50,"suggestions":"126"},{"ruleId":"98","severity":1,"message":"127","line":1,"column":37,"nodeType":"100","messageId":"101","endLine":1,"endColumn":47},{"ruleId":"98","severity":1,"message":"128","line":2,"column":9,"nodeType":"100","messageId":"101","endLine":2,"endColumn":20},{"ruleId":"102","severity":1,"message":"129","line":27,"column":8,"nodeType":"104","endLine":27,"endColumn":10,"suggestions":"130"},{"ruleId":"110","severity":1,"message":"111","line":44,"column":29,"nodeType":"108","endLine":46,"endColumn":31},{"ruleId":"98","severity":1,"message":"112","line":3,"column":8,"nodeType":"100","messageId":"101","endLine":3,"endColumn":9},{"ruleId":"98","severity":1,"message":"109","line":12,"column":19,"nodeType":"100","messageId":"101","endLine":12,"endColumn":27},{"ruleId":"113","severity":1,"message":"114","line":50,"column":33,"nodeType":"115","messageId":"116","endLine":50,"endColumn":35},{"ruleId":"113","severity":1,"message":"114","line":82,"column":33,"nodeType":"115","messageId":"116","endLine":82,"endColumn":35},{"ruleId":"113","severity":1,"message":"114","line":112,"column":33,"nodeType":"115","messageId":"116","endLine":112,"endColumn":35},{"ruleId":"113","severity":1,"message":"114","line":137,"column":33,"nodeType":"115","messageId":"116","endLine":137,"endColumn":35},{"ruleId":"113","severity":1,"message":"114","line":178,"column":60,"nodeType":"115","messageId":"116","endLine":178,"endColumn":62},{"ruleId":"113","severity":1,"message":"114","line":181,"column":54,"nodeType":"115","messageId":"116","endLine":181,"endColumn":56},{"ruleId":"110","severity":1,"message":"111","line":192,"column":33,"nodeType":"108","endLine":192,"endColumn":57},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["133"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'dispatch' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'M' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'body', 'history', and 'title'. Either include them or remove the dependency array.",["134"],"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["135","136"],["137","138"],["139","140"],["141","142"],"'useContext' is defined but never used.","'UserContext' is defined but never used.","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["143"],"no-global-assign","no-unsafe-negation",{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"messageId":"148","fix":"149","desc":"150"},{"messageId":"151","fix":"152","desc":"153"},{"messageId":"148","fix":"154","desc":"150"},{"messageId":"151","fix":"155","desc":"153"},{"messageId":"148","fix":"156","desc":"150"},{"messageId":"151","fix":"157","desc":"153"},{"messageId":"148","fix":"158","desc":"150"},{"messageId":"151","fix":"159","desc":"153"},{"desc":"160","fix":"161"},"Update the dependencies array to be: [dispatch, history]",{"range":"162","text":"163"},"Update the dependencies array to be: [body, history, imgURL, title]",{"range":"164","text":"165"},"removeEscape",{"range":"166","text":"167"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"168","text":"169"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"170","text":"167"},{"range":"171","text":"169"},{"range":"172","text":"167"},{"range":"173","text":"169"},{"range":"174","text":"167"},{"range":"175","text":"169"},"Update the dependencies array to be: [userId]",{"range":"176","text":"177"},[1381,1383],"[dispatch, history]",[1724,1732],"[body, history, imgURL, title]",[598,599],"",[598,598],"\\",[623,624],[623,623],[467,468],[467,467],[492,493],[492,492],[717,719],"[userId]"]